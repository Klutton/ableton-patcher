package config

import (
	"fmt"
	"gopkg.in/yaml.v2"
	"os"
)

type PatcherConfig struct {
	PrivateKey        string `yaml:"private_key,omitempty"`
	OriginalPublicKey string `yaml:"original_public_key,omitempty"`
}

func Parse(filePath string) (*PatcherConfig, error) {
	config := PatcherConfig{
		PrivateKey:        defaultPrivateKey,
		OriginalPublicKey: defaultOriginalPublicKey,
	}

	if filePath != "" {
		file, err := os.Open(filePath)
		if err != nil {
			return nil, err
		}
		decoder := yaml.NewDecoder(file)
		if err := decoder.Decode(&config); err != nil {
			return nil, fmt.Errorf("failed to decode config file: %w", err)
		}
	}

	return &config, nil
}

func (c *PatcherConfig) Save(filePath string) error {
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("create file: %w", err)
	}
	defer file.Close()
	encoder := yaml.NewEncoder(file)
	if err := encoder.Encode(&c); err != nil {
		return fmt.Errorf("encode config: %w", err)
	}
	return nil
}

const (
	defaultPrivateKey        = "308201BC02010002818100BAB5A10970F083E266A1252897DAAC1D67374712E79D3DF1BC8C08A3493C6AA9A2FF33BE4513D8B6767AB6AAE2AF6CC9107976FA75FEE134E8B7BE03D78CC64E089C845207D306A6035F172C5B750275F00BD3CA2331B8A59D54FE79393854DD884B8D334D553B38BC5E886C0A2DD0E4EC32F7D88DE1A7C9DF5C424EE7B1CE6D021500C37BE90E3F8E64E03A42CA8D68AD5C83EB47D3A902818100A33C8737F42E2516A1525544E611D71295805CED94D260D5777DB976F6721F52479158E2477EFB0EA6FF30D34D15B23669F0967D29A2C746288EE42C8D91FE4DBE79A73EE8831251A3566864858E589ADCD41C3863EA118FBBCDF34BD64EF0E7AE20B00192709A8346C816B54A51D804A6E06FCE1DA4B043C2B5270D4E44162202818033FD12FD459FE6C5C1BC0991E915F8BF49997716BDE5C3BDF9A096BDCBF7A425EF6A495683CC84F3DAFAB7A1D5CF9F377FDA84C042E47E7C608298C6917A3CAAB40B3C6262559FE699091C5BB6AC8DE01F0A9F887C739FFA3A1A858000F85A1811EC33A2190063341E8C20ABA068B90383F8CA27D30AA89ADF40DE9CE735DEDB021500C369EA757B46484D1DF3819CC4183F6F9A9BCF3C"
	defaultOriginalPublicKey = "308201B73082012B06072A8648CE3804013082011E02818100CCEDA998CBC666F0D286113320EA04CB7D1BB66CE8BC2206C10935E45141E478F06965C11AFBA09D40CF9C21E6CE5B12D9AD38E2C8BBD0E4DFFAA6B7291D2FB03203F945C5AEF21B7EC2881471251D2B163D6DD7E9ABE13DA986931FFB468E752CDFAB0808E6AB6470DB748D7FDF8C08CE3ACFB83F6F23875C52279EC985200D02150080D7B38A1A2D8A8C2AA68CCA6DCA178C67C606350281800529D1D9F767D75B7E6D5988DD874E29B1E11F5A68A81D23E945105CFFF5667F25E4E2C527613A020083D7F3E36408A9F4B84D8C8EBB6A4D0A82A92612858314CBC9FC8F256AB51151B4BF9C36F752BBBA5549FB3244B3459BCFE2C2A2FCB10275435BAA6251F6CB59956BF8E9F60344CDE2B33A7C3C318B93EBEAEBF35BF6BB03818500028181009186D92E74C507043C97D8EA69F81D6112EFC4491687F5341F92D6ABA4FC764E0CFBACD9C6D6D53578B1FA888217FF6DBC7CC58094A82CD4C1A8B86BE574579AF96F74056D347A4A151E239D4CD289AF5B89ADC7AA3872FDEADE8653E9E7AD97678D5C04291D8BA4B1775490656D62C7D35B2A6B60DF1D71191B14BE57C28ED6"
)
